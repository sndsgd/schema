<?php declare(strict_types=1);

namespace sndsgd\types;

/**
 * GENERATED CODE! DO NOT EDIT!
 * This file was generated by the sndsgd/schema library
 *
 * Name: sndsgd.types.ArrayType
 * Description: an array
 */
final class ArrayType implements \ArrayAccess, \Iterator, \JsonSerializable, \sndsgd\schema\GeneratedType
{
    /**
     * @return \sndsgd\schema\types\ArrayType
     */
    public static function fetchType(): \sndsgd\schema\types\ArrayType
    {
        return unserialize('O:29:"sndsgd\\schema\\types\\ArrayType":4:{s:34:"' . "\0" . 'sndsgd\\schema\\types\\BaseType' . "\0" . 'name";s:22:"sndsgd.types.ArrayType";s:41:"' . "\0" . 'sndsgd\\schema\\types\\BaseType' . "\0" . 'description";s:8:"an array";s:35:"' . "\0" . 'sndsgd\\schema\\types\\BaseType' . "\0" . 'rules";O:22:"sndsgd\\schema\\RuleList":2:{s:29:"' . "\0" . 'sndsgd\\schema\\RuleList' . "\0" . 'rules";a:1:{i:0;O:29:"sndsgd\\schema\\rules\\ArrayRule":2:{s:38:"' . "\0" . 'sndsgd\\schema\\rules\\ArrayRule' . "\0" . 'summary";s:10:"type:array";s:42:"' . "\0" . 'sndsgd\\schema\\rules\\ArrayRule' . "\0" . 'description";s:16:"must be an array";}}s:35:"' . "\0" . 'sndsgd\\schema\\RuleList' . "\0" . 'rulesByName";a:0:{}}s:36:"' . "\0" . 'sndsgd\\schema\\types\\ArrayType' . "\0" . 'value";O:30:"sndsgd\\schema\\types\\ScalarType":4:{s:34:"' . "\0" . 'sndsgd\\schema\\types\\BaseType' . "\0" . 'name";s:23:"sndsgd.types.StringType";s:41:"' . "\0" . 'sndsgd\\schema\\types\\BaseType' . "\0" . 'description";s:8:"a string";s:35:"' . "\0" . 'sndsgd\\schema\\types\\BaseType' . "\0" . 'rules";O:22:"sndsgd\\schema\\RuleList":2:{s:29:"' . "\0" . 'sndsgd\\schema\\RuleList' . "\0" . 'rules";a:1:{i:0;O:30:"sndsgd\\schema\\rules\\StringRule":2:{s:39:"' . "\0" . 'sndsgd\\schema\\rules\\StringRule' . "\0" . 'summary";s:11:"type:string";s:43:"' . "\0" . 'sndsgd\\schema\\rules\\StringRule' . "\0" . 'description";s:16:"must be a string";}}s:35:"' . "\0" . 'sndsgd\\schema\\RuleList' . "\0" . 'rulesByName";a:0:{}}s:42:"' . "\0" . 'sndsgd\\schema\\types\\ScalarType' . "\0" . 'parentName";s:0:"";}}');
    }

    private int $index = 0;
    private array $values = [];

    public function __construct($values, string $path = "$")
    {
        $values = (new \sndsgd\schema\rules\ArrayRule(
            summary: 'type:array',
            description: _('must be an array'),
        ))->validate($values, $path);
        $errors = new \sndsgd\schema\ValidationErrorList();

        for ($i = 0, $len = count($values); $i < $len; $i++) {
            try {
                $this->values[] = (new \sndsgd\types\StringType(
                    $values[$i],
                    "$path.$i"
                ))->getValue();
            } catch (\sndsgd\schema\ValidationFailure $ex) {
                $errors->addErrors($ex->getValidationErrors());
            }
        }
        if (count($errors)) {
            throw $errors->createException();
        }
    }

    /** @see https://www.php.net/manual/en/class.arrayaccess.php */
    public function offsetExists($offset): bool
    {
        return isset($this->values[$offset]);
    }

    /** @see https://www.php.net/manual/en/class.arrayaccess.php */
    public function offsetGet($offset): mixed
    {
        if (!isset($this->values[$offset])) {
            throw new \LogicException('undefined offset');
        }
        return $this->values[$offset];
    }

    /** @see https://www.php.net/manual/en/class.arrayaccess.php */
    public function offsetSet($offset, $value): void
    {
        if (!isset($this->values[$offset])) {
            throw new \LogicException('failed to update read only array');
        }
    }

    /** @see https://www.php.net/manual/en/class.arrayaccess.php */
    public function offsetUnset($offset): void
    {
        if (!isset($this->values[$offset])) {
            throw new \LogicException('failed to update read only array');
        }
    }

    /** @see https://www.php.net/manual/en/class.iterator.php */
    public function current(): mixed
    {
        return $this->values[$this->index];
    }

    /** @see https://www.php.net/manual/en/class.iterator.php */
    public function key(): mixed
    {
        return $this->index;
    }

    /** @see https://www.php.net/manual/en/class.iterator.php */
    public function next(): void
    {
        $this->index++;
    }

    /** @see https://www.php.net/manual/en/class.iterator.php */
    public function rewind(): void
    {
        $this->index = 0;
    }

    /** @see https://www.php.net/manual/en/class.iterator.php */
    public function valid(): bool
    {
        return isset($this->values[$this->index]);
    }

    /** @see https://www.php.net/manual/en/class.jsonserializable.php */
    public function jsonSerialize(): array
    {
        return $this->getValues();
    }

    public function getValues(): array
    {
        return $this->values;
    }
}
